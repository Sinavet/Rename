# water.py
import os
import zipfile
import tempfile
from pathlib import Path
from PIL import Image
import streamlit as st
from utils import filter_large_files, SUPPORTED_EXTS
from io import BytesIO

def apply_watermark(
    base_image: Image.Image,
    watermark_path: str = None,
    position: str = "bottom_right",
    opacity: float = 0.5,
    scale: float = 0.2,
) -> Image.Image:
    """
    –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ (PNG –∏–ª–∏ —Ç–µ–∫—Å—Ç) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    :param base_image: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (PIL.Image)
    :param watermark_path: –ü—É—Ç—å –∫ PNG-–≤–æ–¥—è–Ω–æ–º –∑–Ω–∞–∫—É (–∏–ª–∏ BytesIO, –∏–ª–∏ None)
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–∏–ª–∏ None)
    :param position: –ü–æ–∑–∏—Ü–∏—è ('top_left', 'top_right', 'center', 'bottom_left', 'bottom_right')
    :param opacity: –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0.0-1.0)
    :param scale: –ú–∞—Å—à—Ç–∞–± –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —à–∏—Ä–∏–Ω—ã base_image (0.0-1.0)
    :param text_options: dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–µ–∫—Å—Ç–∞ (font_path, font_size, color)
    :return: –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
    """
    assert watermark_path or text, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å watermark_path –∏–ª–∏ text"
    img = base_image.convert("RGBA")
    wm = None
    if watermark_path:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ BytesIO
        if isinstance(watermark_path, BytesIO):
            wm = Image.open(watermark_path).convert("RGBA")
        else:
            wm = Image.open(watermark_path).convert("RGBA")
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        wm_width = int(img.width * scale)
        wm_ratio = wm_width / wm.width
        wm_height = int(wm.height * wm_ratio)
        wm = wm.resize((wm_width, wm_height), Image.Resampling.LANCZOS)
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        if opacity < 1.0:
            alpha = wm.getchannel("A").point(lambda p: int(p * opacity))
            wm.putalpha(alpha)
    elif text:
        opts = text_options or {}
        font_path = opts.get("font_path", None)
        font_size = opts.get("font_size", 36)
        # –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        base_color = opts.get("color", (255, 255, 255))
        if len(base_color) == 3:
            color = base_color + (int(255 * opacity),)
        else:
            color = base_color[:3] + (int(255 * opacity),)
        if font_path and os.path.exists(font_path):
            font = ImageFont.truetype(font_path, font_size)
        else:
            font = ImageFont.load_default()
        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        dummy_img = Image.new("RGBA", (10, 10))
        draw = ImageDraw.Draw(dummy_img)
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_w, text_h = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        scale_factor = (img.width * scale) / text_w
        font_size_scaled = max(10, int(font_size * scale_factor))
        if font_path and os.path.exists(font_path):
            font = ImageFont.truetype(font_path, font_size_scaled)
        else:
            font = ImageFont.load_default()
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_w, text_h = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        wm = Image.new("RGBA", (int(text_w), int(text_h)), (0, 0, 0, 0))
        draw = ImageDraw.Draw(wm)
        draw.text((0, 0), text, font=font, fill=color)
    else:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    positions = {
        "top_left": (0, 0),
        "top_right": (img.width - wm.width, 0),
        "center": ((img.width - wm.width) // 2, (img.height - wm.height) // 2),
        "bottom_left": (0, img.height - wm.height),
        "bottom_right": (img.width - wm.width, img.height - wm.height),
    }
    pos = positions.get(position, positions["bottom_right"])
    # –í—Å—Ç–∞–≤–∫–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    out = img.copy()
    out.alpha_composite(wm, dest=pos)
    return out.convert("RGB")

def process_watermark_mode(uploaded_files, preset_choice, user_wm_file, user_wm_path, watermark_dir, pos_map, opacity, size_percent, position):
    uploaded_files = filter_large_files(uploaded_files)
    if uploaded_files and (preset_choice != "–ù–µ—Ç" or user_wm_file):
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤", key="process_archive_btn"):
            import time
            with tempfile.TemporaryDirectory() as temp_dir:
                all_images = []
                log = []
                st.markdown("""
                    <div style='font-size:1.3em;font-weight:600;margin-bottom:0.5em;'>‚è≥ –®–∞–≥ 1: –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤</div>
                """, unsafe_allow_html=True)
                for uploaded in uploaded_files:
                    if uploaded.name.lower().endswith(".zip"):
                        zip_temp = os.path.join(temp_dir, uploaded.name)
                        with open(zip_temp, "wb") as f:
                            f.write(uploaded.read())
                        with zipfile.ZipFile(zip_temp, "r") as zip_ref:
                            for member in zip_ref.namelist():
                                try:
                                    zip_ref.extract(member, temp_dir)
                                except Exception as e:
                                    log.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {member} –∏–∑ {uploaded.name}: {e}")
                        extracted = [file for file in Path(temp_dir).rglob("*") if file.is_file() and file.suffix.lower() in SUPPORTED_EXTS]
                        log.append(f"üì¶ –ê—Ä—Ö–∏–≤ {uploaded.name}: –Ω–∞–π–¥–µ–Ω–æ {len(extracted)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                        all_images.extend(extracted)
                    elif uploaded.name.lower().endswith(SUPPORTED_EXTS):
                        img_temp = os.path.join(temp_dir, uploaded.name)
                        with open(img_temp, "wb") as f:
                            f.write(uploaded.read())
                        all_images.append(Path(img_temp))
                        log.append(f"üñºÔ∏è –§–∞–π–ª {uploaded.name}: –¥–æ–±–∞–≤–ª–µ–Ω.")
                    else:
                        log.append(f"‚ùå {uploaded.name}: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                st.markdown(f"<div style='margin-bottom:1em;'>üîç –ù–∞–π–¥–µ–Ω–æ <b>{len(all_images)}</b> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.</div>", unsafe_allow_html=True)
                if not all_images:
                    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –∞—Ä—Ö–∏–≤ —Å –ª–æ–≥–æ–º –æ—à–∏–±–æ–∫
                    result_zip = os.path.join(temp_dir, "result_watermark.zip")
                    with zipfile.ZipFile(result_zip, "w") as zipf:
                        log_path = os.path.join(temp_dir, "log.txt")
                        with open(log_path, "w", encoding="utf-8") as logf:
                            logf.write("\n".join(log))
                        # –£–¥–∞–ª—è—é —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: zipf.write(log_path, arcname="log.txt")
                    with open(result_zip, "rb") as f:
                        st.session_state["result_zip"] = f.read()
                    st.session_state["stats"] = {"total": 0, "processed": 0, "errors": 0}
                    st.session_state["log"] = log
                else:
                    watermark_path = None
                    if preset_choice != "–ù–µ—Ç":
                        watermark_path = os.path.join(watermark_dir, preset_choice)
                    elif user_wm_file:
                        watermark_path = user_wm_path

                    processed_files = []
                    errors = 0
                    if watermark_path:
                        st.markdown("""
                            <div style='font-size:1.3em;font-weight:600;margin-bottom:0.5em;'>üõ†Ô∏è –®–∞–≥ 2: –ù–∞–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞</div>
                        """, unsafe_allow_html=True)
                        progress_bar = st.progress(0)
                        status_placeholder = st.empty()
                        for i, img_path in enumerate(all_images, 1):
                            rel_path = img_path.relative_to(temp_dir)
                            out_path = os.path.join(temp_dir, str(rel_path.with_suffix('.jpg')))
                            out_dir = os.path.dirname(out_path)
                            os.makedirs(out_dir, exist_ok=True)
                            start_time = time.time()
                            try:
                                img = Image.open(img_path)
                                processed_img = apply_watermark(
                                    img,
                                    watermark_path=watermark_path,
                                    position=pos_map[position],
                                    opacity=opacity,
                                    scale=size_percent/100.0
                                )
                                processed_img.save(out_path, "JPEG", quality=100, optimize=True, progressive=True)
                                processed_files.append((out_path, rel_path.with_suffix('.jpg')))
                                log.append(f"‚úÖ {rel_path} ‚Üí {rel_path.with_suffix('.jpg')} (–≤—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫)")
                            except Exception as e:
                                log.append(f"‚ùå {rel_path}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ({e}) (–≤—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫)")
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {rel_path}: {e}")
                                errors += 1
                            progress_bar.progress(i / len(all_images))
                            status_placeholder.markdown(f"<span style='color:#4a90e2;'>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: <b>{i}/{len(all_images)}</b></span>", unsafe_allow_html=True)
                        st.markdown("""
                            <div style='font-size:1.3em;font-weight:600;margin:1em 0 0.5em 0;'>üì¶ –®–∞–≥ 3: –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</div>
                        """, unsafe_allow_html=True)
                        # –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        files_to_zip = [Path(out_path) for out_path, _ in processed_files]
                        log_path = os.path.join(temp_dir, "log.txt")
                        if os.path.exists(log_path):
                            files_to_zip.append(Path(log_path))
                        try:
                            result_zip = os.path.join(temp_dir, "result_watermark.zip")
                            with zipfile.ZipFile(result_zip, "w") as zipf:
                                for file in files_to_zip:
                                    arcname = file.relative_to(Path(temp_dir))
                                    zipf.write(file, arcname=arcname)
                            with open(result_zip, "rb") as f:
                                st.session_state["result_zip"] = f.read()
                            st.session_state["stats"] = {
                                "total": len(all_images),
                                "processed": len(processed_files),
                                "errors": errors
                            }
                            st.session_state["log"] = log
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
                            result_zip = os.path.join(temp_dir, "result_watermark.zip")
                            with zipfile.ZipFile(result_zip, "w") as zipf:
                                log.append(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")
                                log_path = os.path.join(temp_dir, "log.txt")
                                with open(log_path, "w", encoding="utf-8") as logf:
                                    logf.write("\n".join(log))
                                # –£–¥–∞–ª—è—é —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: zipf.write(log_path, arcname="log.txt")
                            with open(result_zip, "rb") as f:
                                st.session_state["result_zip"] = f.read()
                            st.session_state["stats"] = {"total": len(all_images), "processed": len(processed_files), "errors": errors}
                            st.session_state["log"] = log
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ —Å –ª–æ–≥–æ–º –æ—à–∏–±–æ–∫
                        result_zip = os.path.join(temp_dir, "result_watermark.zip")
                        with zipfile.ZipFile(result_zip, "w") as zipf:
                            log_path = os.path.join(temp_dir, "log.txt")
                            with open(log_path, "w", encoding="utf-8") as logf:
                                logf.write("\n".join(log))
                            # –£–¥–∞–ª—è—é —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: zipf.write(log_path, arcname="log.txt")
                        with open(result_zip, "rb") as f:
                            st.session_state["result_zip"] = f.read()
                        st.session_state["stats"] = {"total": len(all_images), "processed": 0, "errors": errors}
                        st.session_state["log"] = log

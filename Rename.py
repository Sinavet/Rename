import streamlit as st
import os
import zipfile
import tempfile
from pathlib import Path
import shutil

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
# –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if 'processing_complete' not in st.session_state:
    st.session_state.processing_complete = False
    st.session_state.log = []
    st.session_state.stats = {}
    st.session_state.result_zip_data = None

def reset_state():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏."""
    st.session_state.processing_complete = False
    st.session_state.log = []
    st.session_state.stats = {}
    st.session_state.result_zip_data = None

st.title("ü§ñ –í–µ–±-–±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ")
st.markdown("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤ `1`.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
if st.session_state.processing_complete:
    st.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤.")
    st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤", on_click=reset_state, use_container_width=True)
else:
    uploaded_zip = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ zip-–∞—Ä—Ö–∏–≤ —Å –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–æ—Ç–æ (–¥–æ 100 –ú–ë)", 
        type="zip",
        on_change=reset_state # –°–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    )

    if uploaded_zip:
        if uploaded_zip.size > 100 * 1024 * 1024:  # 100 –ú–ë
            st.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 100 –ú–ë.")
        else:
            with st.spinner("–ú–∞–≥–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é..."):
                try:
                    with tempfile.TemporaryDirectory() as tmpdir:
                        # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
                        path_tmpdir = Path(tmpdir)
                        zip_path = path_tmpdir / "input.zip"
                        with open(zip_path, "wb") as f:
                            f.write(uploaded_zip.read())
                        
                        with zipfile.ZipFile(zip_path, "r") as zip_ref:
                            zip_ref.extractall(path_tmpdir)

                        exts = ('.jpg', '.jpeg', '.png', '.webp', '.bmp', '.gif')
                        log = []
                        renamed = 0
                        skipped = 0
                        
                        folders = sorted([f for f in path_tmpdir.rglob("*") if f.is_dir()])
                        progress_bar = st.progress(0, text="–ê–Ω–∞–ª–∏–∑ –ø–∞–ø–æ–∫...")

                        for i, folder in enumerate(folders):
                            photos = sorted([f for f in folder.iterdir() if f.is_file() and f.suffix.lower() in exts])
                            relative_folder_path = folder.relative_to(path_tmpdir)

                            if len(photos) == 1:
                                photo = photos[0]
                                new_name = f"1{photo.suffix.lower()}"
                                new_path = photo.parent / new_name
                                relative_photo_path = photo.relative_to(path_tmpdir)
                                relative_new_path = new_path.relative_to(path_tmpdir)
                                if new_path.exists():
                                    log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –§–∞–π–ª '{relative_new_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                                    skipped += 1
                                else:
                                    photo.rename(new_path)
                                    log.append(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{relative_photo_path}' -> '{relative_new_path}'")
                                    renamed += 1
                            elif len(photos) > 1:
                                log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.")
                                skipped += len(photos)
                            else:
                                log.append(f"–ò–Ω—Ñ–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Ç —Ñ–æ—Ç–æ.")
                                skipped += 1
                            
                            progress_bar.progress((i + 1) / len(folders), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {i + 1}/{len(folders)}")

                        # --- –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
                        extracted_items = [p for p in path_tmpdir.iterdir() if p.name != 'input.zip']
                        zip_root = path_tmpdir
                        if len(extracted_items) == 1 and extracted_items[0].is_dir():
                            zip_root = extracted_items[0]

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º shutil.make_archive –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
                        archive_base_name = path_tmpdir / "renamed_photos"
                        shutil.make_archive(
                            base_name=str(archive_base_name),
                            format='zip',
                            root_dir=str(zip_root)
                        )
                        result_zip_path = path_tmpdir / "renamed_photos.zip"
                        
                        with open(result_zip_path, "rb") as f:
                            st.session_state.result_zip_data = f.read()

                        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
                        st.session_state.stats = {'renamed': renamed, 'skipped': skipped, 'folders': len(folders)}
                        st.session_state.log = log
                        st.session_state.processing_complete = True
                        st.rerun()

                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                    st.exception(e)


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
if st.session_state.processing_complete:
    stats = st.session_state.stats
    st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    col1, col2, col3 = st.columns(3)
    col1.metric("–ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", stats.get('folders', 0))
    col2.metric("–§–∞–π–ª–æ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ", stats.get('renamed', 0))
    col3.metric("–§–∞–π–ª–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ", stats.get('skipped', 0))
    
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        data=st.session_state.result_zip_data,
        file_name="renamed_photos.zip",
        mime="application/zip",
        use_container_width=True
    )
    
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥"):
        st.text_area(
            label="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            value="\n".join(st.session_state.log),
            height=300,
            disabled=True
        )

import streamlit as st
import os
import zipfile
import tempfile
from pathlib import Path

st.title("ü§ñ –í–µ–±-–±–æ—Ç: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤ '1'")

uploaded_zip = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ zip-–∞—Ä—Ö–∏–≤ —Å –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–æ—Ç–æ (–¥–æ 100 –ú–ë)", type="zip")

if uploaded_zip:
    if uploaded_zip.size > 100 * 1024 * 1024:  # 100 –ú–ë
        st.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 100 –ú–ë.")
    else:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
            with tempfile.TemporaryDirectory() as tmpdir:
                zip_path = os.path.join(tmpdir, "input.zip")
                with open(zip_path, "wb") as f:
                    f.write(uploaded_zip.read())
                try:
                    with zipfile.ZipFile(zip_path, "r") as zip_ref:
                        zip_ref.extractall(tmpdir)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
                    st.stop()

                exts = ('.jpg', '.jpeg', '.png', '.webp', '.bmp', '.gif')
                log = []
                renamed = 0
                skipped = 0
                folders = [f for f in Path(tmpdir).rglob("*") if f.is_dir()]
                progress_bar = st.progress(0, text="–ü–∞–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: 0/")
                for i, folder in enumerate(folders):
                    photos = [f for f in folder.iterdir() if f.is_file() and f.suffix.lower() in exts]
                    relative_folder_path = folder.relative_to(tmpdir)
                    if len(photos) == 1:
                        photo = photos[0]
                        new_name = f"1{photo.suffix.lower()}"
                        new_path = photo.parent / new_name
                        relative_photo_path = photo.relative_to(tmpdir)
                        relative_new_path = new_path.relative_to(tmpdir)
                        if new_path.exists():
                            log.append(f"{i+1}. –ü—Ä–æ–ø—É—â–µ–Ω–æ: –§–∞–π–ª '{relative_new_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                            skipped += 1
                        else:
                            photo.rename(new_path)
                            log.append(f"{i+1}. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{relative_photo_path}' -> '{relative_new_path}'")
                            renamed += 1
                    elif len(photos) > 1:
                        log.append(f"{i+1}. –ü—Ä–æ–ø—É—â–µ–Ω–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.")
                        skipped += 1
                    else:
                        log.append(f"{i+1}. –ò–Ω—Ñ–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Ç —Ñ–æ—Ç–æ.")
                        skipped += 1
                    progress_bar.progress((i+1)/len(folders), text=f"–ü–∞–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {i+1}/{len(folders)}")

                result_zip_path = os.path.join(tmpdir, "renamed_photos.zip")
                with zipfile.ZipFile(result_zip_path, "w") as zipf:
                    for file in Path(tmpdir).rglob("*"):
                        if file.is_file() and file.name != "input.zip":
                            zipf.write(file, arcname=file.relative_to(tmpdir))

                st.success(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {renamed}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")

                with open(result_zip_path, "rb") as f:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                        data=f.read(),
                        file_name="renamed_photos.zip",
                        mime="application/zip"
                    )
                st.text_area("–õ–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", "\n".join(log), height=400)

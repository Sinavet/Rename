import streamlit as st
import os
import zipfile
import tempfile
from pathlib import Path
from PIL import Image
try:
    import pillow_heif
    pillow_heif.register_heif_opener()
    HEIF_SUPPORT = True
except ImportError:
    HEIF_SUPPORT = False
    st.warning("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HEIC/HEIF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç pillow-heif: pip install pillow-heif")
import shutil
from io import BytesIO
import requests
import uuid
from rename import process_rename_mode
from convers import process_convert_mode
from water import process_watermark_mode
from utils import filter_large_files, SUPPORTED_EXTS, MAX_SIZE_MB

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
from PIL import Image
RESAMPLING = getattr(getattr(Image, 'Resampling', Image), 'LANCZOS', getattr(Image, 'LANCZOS', getattr(Image, 'NEAREST', 0)))

st.set_page_config(page_title="PhotoFlow: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", page_icon="üì∏")
st.markdown("""
<style>
    body, .stApp {
        background-color: #181c24 !important;
        color: #f3f6fa !important;
    }
    .big-title {
        font-size:2.2em; font-weight:700; color:#f3f6fa; margin-bottom:0.2em;
        text-shadow: 0 2px 8px #00000044;
    }
    .subtitle {
        font-size:1.2em; color:#b0b8c9; margin-bottom:1em;
    }
    .stButton>button, .stDownloadButton>button {
        font-size:1.1em;
        background: linear-gradient(90deg, #2d3748 0%, #4a5568 100%);
        color: #f3f6fa;
        border: none;
        border-radius: 6px;
        box-shadow: 0 2px 8px #00000022;
        transition: background 0.2s;
    }
    .stButton>button:hover, .stDownloadButton>button:hover {
        background: linear-gradient(90deg, #4a5568 0%, #2d3748 100%);
        color: #fff;
    }
    .stTextInput>div>input, .stFileUploader>div>input {
        background: #232837;
        color: #f3f6fa;
        border-radius: 6px;
        border: 1px solid #2d3748;
    }
    .stExpander, .stExpanderHeader {
        background: #232837 !important;
        color: #f3f6fa !important;
        border-radius: 8px !important;
    }
    .stAlert, .stSuccess, .stError, .stInfo {
        border-radius: 8px !important;
    }
    .stRadio > div {color: #f3f6fa;}
    .stProgress > div > div {background: #4a90e2 !important;}
    .stTextArea textarea {
        background: #232837;
        color: #f3f6fa;
        border-radius: 6px;
        border: 1px solid #2d3748;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("<div class='big-title'>PhotoFlow: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>", unsafe_allow_html=True)
st.markdown("<div class='subtitle'>–ë—ã—Å—Ç—Ä–æ–µ –∏ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ</div>", unsafe_allow_html=True)

# –ü–æ–¥—Ä–æ–±–Ω—ã–π FAQ –≤ expander
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (FAQ)", expanded=False):
    st.markdown("""
    **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
    1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫).
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤ (ZIP).
    3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–∞—Å—à—Ç–∞–±, –∫–∞—á–µ—Å—Ç–≤–æ, –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫).
    4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    **FAQ:**
    - **–ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å?**  
      –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (—Å–º. —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤).  
      HEIC/HEIF —Ç—Ä–µ–±—É—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ pillow-heif.
    - **–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è?**  
      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π.  
      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    - **–ö–∞–∫ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤?**  
      –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä "–ú–∞—Å—à—Ç–∞–± JPG" –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.  
      –î–ª—è JPG –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ (–ø–æ –∑–∞–ø—Ä–æ—Å—É).
    - **–ì–¥–µ –Ω–∞–π—Ç–∏ –ª–æ–≥ –æ—à–∏–±–æ–∫?**  
      –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–≥ ‚Äî —Å–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    - **–ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**  
      JPG, PNG, BMP, WEBP, TIFF, HEIC, HEIF, ZIP (–∞—Ä—Ö–∏–≤—ã —Å —ç—Ç–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏).
    - **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫?**  
      –ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG/JPG-—Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–∞–ø–∫–∏ watermarks.
    - **–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–∑–∞–≤–∏—Å–ª–æ"?**  
      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤.
    """)

if "reset_uploader" not in st.session_state:
    st.session_state["reset_uploader"] = 0
if "log" not in st.session_state:
    st.session_state["log"] = []
if "result_zip" not in st.session_state:
    st.session_state["result_zip"] = None
if "stats" not in st.session_state:
    st.session_state["stats"] = {}
if "mode" not in st.session_state:
    st.session_state["mode"] = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"

def reset_all():
    st.session_state["reset_uploader"] += 1
    st.session_state["log"] = []
    st.session_state["result_zip"] = None
    st.session_state["stats"] = {}
    st.session_state["mode"] = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"

mode = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
    ["–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG", "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫"],
    index=0 if st.session_state["mode"] == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ" else (1 if st.session_state["mode"] == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG" else 2),
    key="mode_radio",
    on_change=lambda: st.session_state.update({"log": [], "result_zip": None, "stats": {}})
)
st.session_state["mode"] = mode

st.markdown(
    """
    <span style='color:#888;'>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∞—Ä—Ö–∏–≤ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é</span>
    """,
    unsafe_allow_html=True
)

uploaded_files = st.file_uploader(
    f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤ (–¥–æ {MAX_SIZE_MB} –ú–ë, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG, PNG, HEIC, ZIP –∏ –¥—Ä.)",
    type=["jpg", "jpeg", "png", "bmp", "webp", "tiff", "heic", "heif", "zip"],
    accept_multiple_files=True,
    key=st.session_state["reset_uploader"]
)

# --- UI –¥–ª—è —Ä–µ–∂–∏–º–∞ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ ---
if mode == "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫":
    st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ (PNG/JPG):**")
    import glob
    from water import apply_watermark
    watermark_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "watermarks"))
    preset_files = []
    if os.path.exists(watermark_dir):
        preset_files = [f for f in os.listdir(watermark_dir) if f.lower().endswith((".png", ".jpg", ".jpeg"))]
    preset_choice = st.selectbox("–í–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ watermarks/", ["–ù–µ—Ç"] + preset_files)
    user_wm_file = st.file_uploader("–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π PNG/JPG –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫", type=["png", "jpg", "jpeg"], key="watermark_upload")
    user_wm_path = None
    if user_wm_file is not None:
        tmp_dir = tempfile.gettempdir()
        user_wm_path = os.path.join(tmp_dir, f"user_wm_{user_wm_file.name}")
        with open(user_wm_path, "wb") as f:
            f.write(user_wm_file.read())
    st.sidebar.header('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞')
    opacity = st.sidebar.slider('–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å', 0, 100, 60) / 100.0
    size_percent = st.sidebar.slider('–†–∞–∑–º–µ—Ä (% –æ—Ç —à–∏—Ä–∏–Ω—ã —Ñ–æ—Ç–æ)', 5, 80, 25)
    position = st.sidebar.selectbox('–ü–æ–ª–æ–∂–µ–Ω–∏–µ', [
        '–ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª',
        '–õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª',
        '–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª',
        '–õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª',
        '–ü–æ —Ü–µ–Ω—Ç—Ä—É',
    ])
    pos_map = {
        '–ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª': 'bottom_right',
        '–õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª': 'bottom_left',
        '–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª': 'top_right',
        '–õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª': 'top_left',
        '–ü–æ —Ü–µ–Ω—Ç—Ä—É': 'center',
    }
    bg_color = st.sidebar.color_picker("–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", "#CCCCCC")

    # --- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ---
    st.markdown("**–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:**")
    preview_img = None
    def get_first_image(uploaded_files):
        for file in uploaded_files:
            if file.name.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tiff', '.heic', '.heif')):
                file.seek(0)
                try:
                    return Image.open(file)
                except Exception:
                    continue
            elif file.name.lower().endswith('.zip'):
                import zipfile
                from io import BytesIO
                file.seek(0)
                with zipfile.ZipFile(file, 'r') as zf:
                    for name in zf.namelist():
                        if name.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tiff', '.heic', '.heif')):
                            with zf.open(name) as imgf:
                                try:
                                    return Image.open(BytesIO(imgf.read()))
                                except Exception:
                                    continue
        return None
    preview_img = get_first_image(uploaded_files) if uploaded_files else None
    if preview_img is None:
        preview_img = Image.new("RGB", (400, 300), bg_color)
    wm_path = None
    if preset_choice != "–ù–µ—Ç":
        wm_path = os.path.join(watermark_dir, preset_choice)
    elif user_wm_file:
        tmp_dir = tempfile.gettempdir()
        wm_path = os.path.join(tmp_dir, f"user_wm_{user_wm_file.name}")
        with open(wm_path, "wb") as f:
            f.write(user_wm_file.getvalue() if hasattr(user_wm_file, 'getvalue') else user_wm_file.read())
    try:
        if wm_path:
            preview = apply_watermark(preview_img, watermark_path=wm_path, position=pos_map[position], opacity=opacity, scale=size_percent/100.0)
        else:
            preview = preview_img
        st.image(preview, caption="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", use_container_width=True)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

# –ú–∞—Å—à—Ç–∞–± JPG –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
st.sidebar.markdown("**–ú–∞—Å—à—Ç–∞–± JPG (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ):**")
scale_percent = st.sidebar.slider(
    "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (%)",
    min_value=10, max_value=100, value=100, step=5,
    help="–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –Ω–æ –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é."
)
st.sidebar.caption("–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –Ω–æ –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é.")
# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
if uploaded_files:
    try:
        from io import BytesIO
        file = next((f for f in uploaded_files if f.name.lower().endswith((".jpg", ".jpeg", ".png", ".bmp", ".webp", ".tiff", ".heic", ".heif"))), None)
        if file:
            file.seek(0)
            img = Image.open(file)
            orig_size = file.size if hasattr(file, 'size') else file.getbuffer().nbytes if hasattr(file, 'getbuffer') else None
            w, h = img.size
            new_w = int(w * scale_percent / 100)
            new_h = int(h * scale_percent / 100)
            img_resized = img.resize((new_w, new_h), RESAMPLING)
            buf = BytesIO()
            img_resized.save(buf, format="JPEG", quality=90, optimize=True, progressive=True)
            approx_size = buf.tell()
            st.sidebar.info(f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {approx_size//1024} –ö–ë (–±—ã–ª–æ: {orig_size//1024 if orig_size else '?'} –ö–ë)")
    except Exception as e:
        st.sidebar.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä: {e}")

if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
    process_rename_mode(uploaded_files, scale_percent)
elif mode == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG":
    process_convert_mode(uploaded_files, scale_percent)
elif mode == "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫":
    process_watermark_mode(uploaded_files, preset_choice, user_wm_file, user_wm_path, watermark_dir, pos_map, opacity, size_percent, position, scale_percent)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –∏ –ª–æ–≥–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
if st.session_state.get("result_zip"):
    st.success("‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")
    result_zip = st.session_state["result_zip"]
    archive_data = None
    archive_size = None
    if isinstance(result_zip, bytes):
        archive_data = result_zip
        archive_size = len(result_zip)
    elif isinstance(result_zip, str) and os.path.exists(result_zip):
        with open(result_zip, "rb") as f:
            archive_data = f.read()
            archive_size = os.path.getsize(result_zip)
    else:
        archive_data = None
    if archive_data:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
            data=archive_data,
            file_name=(
                "renamed_photos.zip" if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"
                else "converted_photos.zip" if mode == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG"
                else "watermarked_images.zip"
            ),
            mime="application/zip",
            type="primary"
        )
        if archive_size:
            st.caption(f"–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {archive_size // 1024} –ö–ë ({archive_size / 1024 / 1024:.2f} –ú–ë)")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=False):
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥ –≤ .txt",
            data="\n".join(st.session_state["log"]),
            file_name="log.txt",
            mime="text/plain"
        )
        st.text_area("–õ–æ–≥:", value="\n".join(st.session_state["log"]), height=300, disabled=True)
else:
    st.info("‚ÑπÔ∏è –ê—Ä—Ö–∏–≤ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

if st.button("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", type="primary"):
    reset_all()
    st.rerun()

# --- –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
# –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤:
# if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤"):
#     ...
# (–í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—à–µ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ '–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫')

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ TransferNow ---
def upload_to_transfernow(file_path):
    url = "https://api.transfernow.net/v2/transfers"
    with open(file_path, 'rb') as f:
        files = {'files': (os.path.basename(file_path), f)}
        data = {
            'message': '–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!',
            'email_from': 'noreply@photoflow.local'
        }
        response = requests.post(url, files=files, data=data)
    if response.status_code == 201:
        return response.json().get('download_url')
    else:
        return None
